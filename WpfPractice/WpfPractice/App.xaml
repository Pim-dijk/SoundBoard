<Application x:Class="SoundBoard.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:SoundBoard"
             StartupUri="Directory/Views/MainWindow.xaml">
    <Application.Resources>
        
        <!--Style template for the buttons-->
        <Style x:Key="mainButton" TargetType="Button">
            <Setter Property="BorderBrush" Value="DarkGoldenrod" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="Opacity" Value="0.75" />
            <Setter Property="Height" Value="90"/>
            <Setter Property="Width" Value="125" />
            <Setter Property="Margin" Value="3" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">

                        <!--Override the default behaviour so the background doesn't disappear and the button doesn't blink blue-->
                        <Border CornerRadius="5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"/>
                        </Border>

                        <!--Action on mouse enter, because we don't set the background it won't disappear on mouse enter-->
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand" />
                                <Setter Property="Opacity" Value="1" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="BorderBrush" Value="White" />
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            
            <!--Sets the image to a default if unset-->
            <Style.Triggers>
                <DataTrigger Binding="{Binding HasImage}" Value="False">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/WpfPractice;component/Images/soundIcon.png" Stretch="Uniform" Opacity="0.75" />
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <!--Sets the image to the bounds value if set-->
                <DataTrigger Binding="{Binding HasImage}" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="{Binding Path=ImageBitMap}" Stretch="UniformToFill" Opacity="0.75" />
                        </Setter.Value>
                    </Setter>
                </DataTrigger>

                <!--Animation when the sound is playing-->
                <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                    <DataTrigger.EnterActions>
                        <BeginStoryboard x:Name="isPlaying">
                            <Storyboard>
                                <DoubleAnimation From="0.5" To="1" Duration="0:0:0.5" Storyboard.TargetProperty="Opacity" AutoReverse="True" RepeatBehavior="Forever"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.EnterActions>
                    <!--Stop the animation-->
                    <DataTrigger.ExitActions>
                        <StopStoryboard BeginStoryboardName="isPlaying"/>
                    </DataTrigger.ExitActions>
                </DataTrigger>

            </Style.Triggers>
        </Style>

        <!--Sets the image for the mute button based on boolean-->
        <Style x:Key="mutedButtonImage" TargetType="Button">
            <Setter Property="Width" Value="25"/>
            <Setter Property="Height" Value="25"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"/>
                        </Border>
                        <!--Action on mouse enter, because we don't set the background it won't disappear on mouse enter-->
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Muted}" Value="False">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/WpfPractice;component/Images/unmuteIcon.png" />
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Muted}" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="/WpfPractice;component/Images/muteIcon.png" />
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!--Style for the remove button-->
        <Style x:Key="removeButton" TargetType="Button">
            <Setter Property="Width" Value="10" />
            <Setter Property="Height" Value="10" />
            <Setter Property="Background" Value="Red" />
            <Setter Property="Foreground" Value="Black" />
        </Style>
        
        <!--Style for the stop button, overrides button-->
        <Style x:Key="stopButton" TargetType="Button" BasedOn="{StaticResource mainButton}">
            <Setter Property="Background" Value="Red" />
            <Setter Property="Height" Value="45" />
            <Setter Property="Width" Value="{Binding ElementName=Window}" />
            <Setter Property="Margin" Value="0" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="FontSize" Value="25" />
            <Setter Property="Foreground" Value="WhiteSmoke" />
        </Style>

        <!--Style for the TextBlocks-->
        <Style x:Key="textBlockStyle" TargetType="TextBlock">
            <Setter Property="TextWrapping" Value="Wrap" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="FontSize" Value="21" />
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect
                        ShadowDepth="0"
                        Color="#FF005FFF"
                        Opacity="1"
                        BlurRadius="5" />
                </Setter.Value>
            </Setter>
        </Style>
        
        <!--Border animation-->
        <Style x:Key="BorderAnimation" TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="Animation0" BeginTime="00:00:00.0" RepeatBehavior="Forever">
                                <ColorAnimationUsingKeyFrames Storyboard.TargetName="ellipse0" Storyboard.TargetProperty="Opacity">
                                </ColorAnimationUsingKeyFrames>
                            </Storyboard>

                            <Storyboard x:Key="Animation1" BeginTime="00:00:00.2" RepeatBehavior="Forever">
                                <ColorAnimationUsingKeyFrames Storyboard.TargetName="ellipse1" Storyboard.TargetProperty="Opacity">
                                </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsVisible" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource Animation0}" x:Name="Storyboard0" />
                                    <BeginStoryboard Storyboard="{StaticResource Animation1}" x:Name="Storyboard1"/>
                                </Trigger.EnterActions>

                                <Trigger.ExitActions>
                                    <StopStoryboard BeginStoryboardName="Storyboard0"/>
                                    <StopStoryboard BeginStoryboardName="Storyboard1"/>
                                </Trigger.ExitActions>
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--ItemsControl style-->
        <Style x:Name="itemsControlStyle" TargetType="ItemsControl">
            <Setter Property="AllowDrop" Value="True" />
        </Style>
        
    </Application.Resources>
</Application>
